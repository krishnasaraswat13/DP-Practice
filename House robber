//recursion approach (TLE)
class Solution {
    public int rob(int[] nums) {
        return sol(nums,nums.length-1);
    }
    public static int sol(int[] nums,int n){
        if(n==0){
            return nums[n];
        }
        if(n<0) return 0;
        //pick
        int a=nums[n]+sol(nums,n-2);
        //not pick
        int b=sol(nums,n-1);
        return Math.max(a,b);
    }
}
// top to down approach(TLE)
class Solution {
    public int rob(int[] nums) {
        int dp[]=new int[nums.length];
        return sol(nums,nums.length-1,dp);
    }
    public static int sol(int[] nums,int n,int[] dp){
        if(n==0){
            return nums[n];
        }
        if(n<0) return 0;
        if(dp[n]!=0) return dp[n];
        //pick
        int a=nums[n]+sol(nums,n-2,dp);
        //not pick
        int b=sol(nums,n-1,dp);
        dp[n]=Math.max(a,b);
        return Math.max(a,b);
    }
}

//bottom to up approach
class Solution {
    public int rob(int[] nums) {
        int dp[]=new int[nums.length];
        return sol(nums,nums.length-1,dp);
    }
    public static int sol(int[] nums,int n,int[] dp){
        if(n<1){
            return nums[n];
        }
        dp[0]=nums[0];
        dp[1]=Math.max(nums[0],nums[1]);
        for(int i=2;i<=n;i++){
            dp[i]=Math.max(dp[i-1],dp[i-2]+nums[i]);
        }
        return dp[n];
    }
}