class Solution {
    static int knapsack(int W, int val[], int wt[]) {
        // code here
        int dp[][]=new int[wt.length][W+1];
       return sol(W,val,wt,0,dp);
        
    }
    public static int sol(int wt,int price[],int vajan[],int idx,int dp[][]){
       
        if(wt==0 || idx==vajan.length ) return 0;
        
        if(vajan[idx]<=wt){
            if(dp[idx][wt]!=0){
                return dp[idx][wt];
            }
            int in=sol(wt-vajan[idx],price,vajan,idx+1,dp)+price[idx];
            int ex=sol(wt,price,vajan,idx+1,dp);
            return dp[idx][wt]= Math.max(in,ex);
        }
        else{
            return dp[idx][wt]=sol(wt,price,vajan,idx+1,dp);
        }
    }
}
//bottom up approach 
class Solution {
    static int knapsack(int W, int val[], int wt[]) {
        // code here
        int dp[][]=new int[wt.length+1][W+1];
       for(int i=dp.length-2;i>=0;i--){
           for(int j=1;j<dp[0].length;j++){
               if(wt[i]>j){
                   dp[i][j]=dp[i+1][j];
               }
               else{
                   dp[i][j]=Math.max(dp[i+1][j-wt[i]]+val[i],dp[i+1][j]);
               }
           }
       }
       return dp[0][dp[0].length-1];
    }
}

